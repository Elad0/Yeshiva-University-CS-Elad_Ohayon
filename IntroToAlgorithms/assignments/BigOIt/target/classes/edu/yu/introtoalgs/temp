 package edu.yu.introtoalgs;

import java.util.*;
import java.util.concurrent.*;
import java.lang.reflect.*;

public class BigOIt extends BigOItBase{
	long wait=0;
	private long avg=0;
	private String measure;
	
	 class Task implements Callable<Double> {
		    @Override
		    public Double call() throws Exception {
		       
		    	return doublingRaioHidden(measure,wait);
		        
		    }
		} 

 
	 


	
	 public BigOIt() { //TODO Work on properly measuring time taken and getting "factor" and method to exit after timeout

	 }

private double doublingRaioHidden(String bigOMeasurable, long timeOutInMs) {
		
		List<Long> data= new ArrayList<Long>();
		
		long pretime=0;
		long posttime=0;
		double doubleRatio=0;
			Object OClass;
			try {
				OClass = Class.forName(bigOMeasurable).newInstance();
				for(int i=100; i<10000000; i=(int) (i*Math.sqrt(6))) {
					
					Method setuper= OClass.getClass().getMethod("setup", int.class);
					Method run=OClass.getClass().getMethod("execute");
											
					setuper.invoke(OClass, i);	
					pretime=System.nanoTime();
					run.invoke(OClass);
					posttime=System.nanoTime();
					data.add(posttime-pretime);
					
				}	
			} catch (InstantiationException | IllegalAccessException | ClassNotFoundException  | NoSuchMethodException | SecurityException | IllegalArgumentException | InvocationTargetException e ) {
				throw new IllegalArgumentException();
				}
			
			
			double doubleRatio1=calculateDoubling(data);
			double doubleRatio2=calculateDoubling(data);
			double doubleRatio3=calculateDoubling(data);
			double doubleRatio4=calculateDoubling(data);
			double doubleRatio5=calculateDoubling(data);
			doubleRatio=(doubleRatio1+doubleRatio2+doubleRatio3+doubleRatio4+doubleRatio5)/5;
			System.out.println(doubleRatio+ "is                                         ");
		return doubleRatio;

	}
	
	private double calculateDoubling(List<Long> data) {
		System.out.println(data);
		double avg=data.get(1)/(double)data.get(0);
	
		for(int i=2; i<data.size(); i++) {
			if(data.get(i)<data.get(i-1)) {
				data.remove(i);
			}
			//System.out.println(data.get(i)+ " and dividing by "+ data.get(i-1));
		//	System.out.println(i+ " and the divisor is "+ (i-1));
			avg+=data.get(i)/(double)data.get(i-1);
		}
		//System.out.println(avg*2/data.size());
		avg=avg/data.size();
		return avg;
}

	@Override
	public double doublingRatio(String bigOMeasurable, long timeOutInMs) { //TODO if time in ms is too low then return nan instead
		this.wait=timeOutInMs;
		this.measure=bigOMeasurable;
		
		
			 ExecutorService executor = Executors.newSingleThreadExecutor();
		     Future<Double> future = executor.submit(new Task());
		        
		        		try {
							future.get(timeOutInMs, TimeUnit.MILLISECONDS);
							//return doublingRaioHidden(bigOMeasurable,timeOutInMs);
							return avg;
		        		} catch (InterruptedException | ExecutionException | TimeoutException e1) {
							future.cancel(true);
							executor.shutdown();
							return 0.0/0.0;
						}

	}
}